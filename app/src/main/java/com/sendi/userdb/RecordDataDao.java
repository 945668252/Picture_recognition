package com.sendi.userdb;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.sendi.userdb.RecordData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECORD_DATA".
*/
public class RecordDataDao extends AbstractDao<RecordData, Void> {

    public static final String TABLENAME = "RECORD_DATA";

    /**
     * Properties of entity RecordData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Img_url = new Property(0, String.class, "img_url", false, "IMG_URL");
        public final static Property Img_id = new Property(1, String.class, "img_id", false, "IMG_ID");
        public final static Property Tags_selected = new Property(2, String.class, "tags_selected", false, "TAGS_SELECTED");
        public final static Property Tags_unselected = new Property(3, String.class, "tags_unselected", false, "TAGS_UNSELECTED");
        public final static Property Status = new Property(4, String.class, "status", false, "STATUS");
    };


    public RecordDataDao(DaoConfig config) {
        super(config);
    }
    
    public RecordDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORD_DATA\" (" + //
                "\"IMG_URL\" TEXT," + // 0: img_url
                "\"IMG_ID\" TEXT," + // 1: img_id
                "\"TAGS_SELECTED\" TEXT," + // 2: tags_selected
                "\"TAGS_UNSELECTED\" TEXT," + // 3: tags_unselected
                "\"STATUS\" TEXT);"); // 4: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORD_DATA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RecordData entity) {
        stmt.clearBindings();
 
        String img_url = entity.getImg_url();
        if (img_url != null) {
            stmt.bindString(1, img_url);
        }
 
        String img_id = entity.getImg_id();
        if (img_id != null) {
            stmt.bindString(2, img_id);
        }
 
        String tags_selected = entity.getTags_selected();
        if (tags_selected != null) {
            stmt.bindString(3, tags_selected);
        }
 
        String tags_unselected = entity.getTags_unselected();
        if (tags_unselected != null) {
            stmt.bindString(4, tags_unselected);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(5, status);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public RecordData readEntity(Cursor cursor, int offset) {
        RecordData entity = new RecordData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // img_url
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // img_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tags_selected
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tags_unselected
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RecordData entity, int offset) {
        entity.setImg_url(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setImg_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTags_selected(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTags_unselected(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStatus(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(RecordData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(RecordData entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
